#==‚â†==‚â†==‚â†==‚â†==‚â†====‚â†==‚â†==‚â†==‚â†==‚â†==‚â†==#
#Copyright by JunidoKai
#Version : 2.2.4
#Python 3.12 
#17/07/2025 | 19:00:568
#N·∫øu decode vui l√≤ng ƒë·ªÉ l·∫°i comment n√†y
#==‚â†==‚â†==‚â†==‚â†==‚â†==‚â†==‚â†==‚â†==‚â†==‚â†==‚â†==‚â†==#
#==‚â†==Th∆∞ Vi·ªán==‚â†==#
import requests, base64, os, sys, socket
from time import sleep
#==‚â†==‚â†=M√†u=‚â†==‚â†==#
xam = "\033[1;38;5;8m"
xla = "\033[1;38;5;10m"
vang = "\033[1;38;5;11m"
xduong = "\033[1;38;5;14m"
trang = "\033[1;38;5;15m"
xdam = "\033[1;38;5;21m"
xlv1 = "\033[1;38;5;42m"
xv1 = "\033[1;38;5;44m"
xlv2 = "\033[1;38;5;49m"
dv1 = "\033[1;38;5;50m"
la = "\033[1;38;5;79m"
vchuoi = "\033[1;38;5;154m"
do = "\033[1;38;5;196m"
mv1 = "\033[1;38;5;199m"
tim = "\033[1;38;5;201m"
cam = "\033[1;38;5;202m"
hdam = "\033[1;38;5;204m"
hong = "\033[1;38;5;211m"
vlightc = "\033[1;38;5;214m"
clightv = "\033[1;38;5;220m"
#==‚â†==‚â†=Th√¥ng B√°o=‚â†==‚â†==#
done = xla + "[" + xlv2 + "‚úî" + xla +"]"
kt = xla + "[‚äÄ" + trang + "/" + xla + "‚äÅ]"  + trang + "=" + xv1 + ">"
error = vlightc + "[" + clightv + "!" + vlightc + "]"
#==‚â†==‚â†=Admin=‚â†==‚â†==#
wnn = xdam+"W"+xla+"h"+vang+"i"+do+"t"+cam+"e"+vchuoi+" NN"+xam
ma = hdam+"M"+hong+"i"+hdam+"n"+hong+"h"+hdam+"A"+hong+"n"+hdam+"h"+hong+"süê∞"+xam
jndk = xdam+"J"+xv1+"u"+xduong+"n"+xlv2+"i"+xlv1+"d"+xla+"o" +clightv+" K"+vlightc+ "a"+cam+"i"+xam
ht = wnn+trang+" & "+ma+trang+" & "+ jndk
#==‚â†==‚â†=IP=‚â†==‚â†==#
def get_ip_from_url(url):
    response = requests.get(url)
    ip_address = socket.gethostbyname(response.text.strip())
    return ip_address
url = "http://kiemtraip.com/raw.php"
ip = get_ip_from_url(url)
#==‚â†==Banner==‚â†==#
def minhanhs():
 os.system("cls" if os.name == "nt" else "clear")
 macuti = f"""               {ht}\n
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚£∂‚£¶‚†Ä‚†Ä‚†Ä‚£Ä‚£§‚£¥‚£∂‚£∂ ‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚£¥‚£¶‚†Ä     {dv1}Copyright{trang} : {ma}
‚†Ä‚†Ä‚†Ä ‚£æ‚£ø‚£ø‚£ø‚£†‚£¥‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ä‚£Ä‚£§‚£∂‚£ø‚£ø‚£ø‚°ü‚†Ä     {dv1}Admin{trang}     : {wnn}
‚£Ä‚£Ä‚†Ä‚£∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ü‚†Ä‚†Ä     {dv1}Admin{trang}     : {jndk}
‚£ø‚£ø‚£∑‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£Ø‚£§‚£§‚£§
‚¢ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø     {xla}Name Tool{trang} :{xam}
‚†Ä‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ü‚†Å        {xlv2}         Banner{xam}
‚†Ä‚†Ä‚£ø‚£ø‚°ü‚†Ä‚†Ä‚†Ä‚†Ä{xla} ‚°¥‚†ñ‚†¶{xam}‚†º‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°Ü‚†Ä
‚†Ä‚†Ä‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä{xla}‚£º‚£á‚£ã‚°ó{xam}‚†Ä‚†Ä‚¢ø‚£ø‚¢ª‚£ø‚°ü‚¢ø‚£ø‚£ø‚£∑‚†Ä     {dv1}Github   {trang} : {do}@404ERROR{xam}
‚†Ä‚£Ä‚£ø‚£ø‚£§‚£§‚£§‚£§‚£§‚£¨‚£≠‚£•‚£§‚£§‚£§‚£§‚£§‚£º‚£ø‚£á‚°Ä‚†ô‚£ø‚°ø‚†Ä                 {do}@404ERROR{xam}
‚†Ä‚£ø‚£ø‚£ø‚†õ‚†ª‚£ø‚°ü‚†õ‚†õ‚†õ‚†õ‚†õ‚†õ‚£ø‚°ø‚†õ‚†ª‚£ø‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä                 {do}@404ERROR{xam}
‚†Ä‚£ø‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚£†‚£æ‚£ø‚£ø‚£ø‚£ø‚£¶‚£Ä‚†Ä{do}‚£ø{xam}‚†Ä‚£ø‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†ô‚¢ø‚£ø‚£∂‚£æ‚£ø‚£ø‚£ø‚£ø‚†ø‚†ø‚£ø‚£ø‚£ø‚£ø‚£∂‚£æ‚£ø‚†ü‚†Å‚†Ä‚†Ä‚†Ä‚†Ä     {xduong}IP c·ªßa b·∫°n : {xlv2}{ip}{xam}
‚†Ä‚†Ä‚†Ä‚¢ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£¶‚£¥‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†õ‚†ª‚†ø‚†ø‚†õ‚†ã‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
{do}                         Ho√†ng Xa - Tr∆∞·ªùng Xa{trang} l√† c·ªßa {vang}Vi·ªát Nam üáªüá≥

"""
 for X in macuti:
  sys.stdout.write(X)
  sys.stdout.flush() 
  sleep(0.00010)
minhanhs()
#==‚â†==Soucre==‚â†==#
def ma_git():
    token = input(f"{xduong}Nh·∫≠p Token {trang}: ").strip()
    headers = {
        "Authorization": f"token {token}",
        "Accept": "application/vnd.github+json"
    }
    minhanhs()
    user = requests.get("https://api.github.com/user", headers=headers).json()
    print(" ‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì")
    print(f"  {xduong}{kt}   T√†i kho·∫£n {trang}‚ïó\n                      ‚ïö‚âª {mv1}{user['login']} {done}")
    print(" ‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ")
    return headers, user['login']

def ma_repo(headers, username):
    repos = requests.get(f"https://api.github.com/user/repos", headers=headers).json()
    if not repos:
        print("B·∫°n ch∆∞a c√≥ repo n√†o.")
    else:
        sleep(1)
        minhanhs()
        print(f"\n{kt} Repo hi·ªán c√≥ :")
        for idx, repo in enumerate(repos):
            print(f"  {kt}{xla} Repo {idx+1}{trang}: {vang}{repo['name']}")
    choice = input("\nNh·∫≠p s·ªë ƒë·ªÉ ch·ªçn repo, ho·∫∑c g√µ 'y' ƒë·ªÉ t·∫°o repo m·ªõi: ").strip()
    minhanhs()

    if choice.lower() == 'y' or not repos:
        repo_name = input("Nh·∫≠p t√™n repo m·ªõi: ").strip()
        data = {
            "name": repo_name,
            "auto_init": True,
            "private": False
        }
        r = requests.post("https://api.github.com/user/repos", headers=headers, json=data)
        if r.status_code == 201:
            print(f"Repo '{repo_name}' ƒë√£ ƒë∆∞·ª£c t·∫°o.")
            return repo_name
        else:
            print(f"{error}Kh√¥ng t·∫°o ƒë∆∞·ª£c repo.\n   Ki·ªÉm tra l·∫°i token ho·∫∑c quy·ªÅn.")
            exit()
    else:
        try:
            repo_name = repos[int(choice)-1]['name']
            return repo_name
        except:
            print("L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Tho√°t.")
            exit()

def ma_up_file(headers, username, repo):
    file_choice = input("\nCh·ªçn [1] T·∫£i file t·ª´ m√°y l√™n\nCh·ªçn [2] T·∫°o file m·ªõi\nNh·∫≠p l·ª±a ch·ªçn: ").strip()
    if file_choice == '1':
        file_path = input("Nh·∫≠p ƒë∆∞·ªùng d·∫´n file: ").strip()
        file_name = os.path.basename(file_path)
        with open(file_path, "rb") as f:
            content = base64.b64encode(f.read()).decode()
    else:
        file_name = input("Nh·∫≠p t√™n file m·ªõi (v√≠ d·ª•: hello.txt): ").strip()
        text = input("Nh·∫≠p n·ªôi dung file: ").strip()
        content = base64.b64encode(text.encode()).decode()
    #T·∫°o README.md n·∫øu ch∆∞a c√≥
    readme_url = f"https://api.github.com/repos/{username}/{repo}/contents/README.md"
    r = requests.get(readme_url, headers=headers)
    if r.status_code == 404:
        print("T·∫°o README.md...")
        data = {
            "message": "Add README.md",
            "content": base64.b64encode("# README".encode()).decode()
        }
        requests.put(readme_url, headers=headers, json=data)

    # Upload file
    file_url = f"https://api.github.com/repos/{username}/{repo}/contents/{file_name}"
    data = {
        "message": f"Add {file_name}",
        "content": content
    }
    r = requests.put(file_url, headers=headers, json=data)
    if r.status_code in [200, 201]:
        print(f"ƒê√£ upload file {file_name} th√†nh c√¥ng.")
        raw_link = f"https://raw.githubusercontent.com/{username}/{repo}/main/{file_name}"
        print(f"Link raw: {raw_link}")
    else:
        print("L·ªói upload file:", r.json())

def delete_file(headers, username, repo):
    url = f"https://api.github.com/repos/{username}/{repo}/contents/"
    r = requests.get(url, headers=headers)
    if r.status_code == 200:
        items = [item for item in r.json() if item['type'] == 'file']
        if not items:
            print("Repo kh√¥ng c√≥ file n√†o ƒë·ªÉ xo√°.")
            return
        minhanhs()
        print(f"\n  {kt}Danh s√°ch file:")
        for idx, item in enumerate(items):
            print(f"   {kt}{xla}File {idx+1}{trang}:{vang} {item['name']}")

        choice = input(f"Nh·∫≠p s·ªë th·ª© t·ª± file mu·ªën xo√°: ").strip()
        try:
            idx = int(choice) - 1
            file_info = items[idx]
            file_name = file_info['name']
            sha = file_info['sha']

            confirm = input(f"B·∫°n c√≥ ch·∫Øc mu·ªën xo√° file [{file_name}] (y/n): ").strip().lower()
            if confirm == 'y':
                file_url = f"https://api.github.com/repos/{username}/{repo}/contents/{file_name}"
                data = {
                    "message": f"Delete {file_name}",
                    "sha": sha
                }
                r = requests.delete(file_url, headers=headers, json=data)
                if r.status_code == 200:
                    print(f"{done}ƒê√£ xo√° file {file_name} th√†nh c√¥ng.")
                else:
                    print(f"{error}L·ªói khi xo√° file:", r.json())
            else:
                print("ƒê√£ hu·ª∑ xo√° file.")
        except (IndexError, ValueError):
            print(f"L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá.")
    else:
        print("Kh√¥ng th·ªÉ l·∫•y danh s√°ch file:", r.json())

def delete_repo(headers, username, current_repo):
    repos = requests.get(f"https://api.github.com/user/repos", headers=headers).json()
    if not repos:
        print(f"B·∫°n kh√¥ng c√≥ repo n√†o ƒë·ªÉ xo√°.")
        return current_repo
    minhanhs()
    print(f"\n{kt}  Danh s√°ch repo:")
    for idx, repo in enumerate(repos):
        print(f"  {kt}{xla} Repo {idx+1}{trang}: {vang}{repo['name']}")

    choice = input(f"Nh·∫≠p s·ªë th·ª© t·ª± repo mu·ªën xo√°: ").strip()
    try:
        idx = int(choice) - 1
        repo_name = repos[idx]['name']

        confirm = input(f"B·∫°n c√≥ ch·∫Øc mu·ªën xo√° repo '{repo_name}'(y/n): ").strip().lower()
        if confirm == 'y':
            url = f"https://api.github.com/repos/{username}/{repo_name}"
            r = requests.delete(url, headers=headers)
            if r.status_code == 204:
                print(f"{done} ƒê√£ xo√° repo '{repo_name}' th√†nh c√¥ng.")
                if repo_name == current_repo:
                    print(f"Repo hi·ªán t·∫°i ƒë√£ b·ªã xo√°, ch·ªçn repo m·ªõi.")
                    return ma_repo(headers, username)
                else:
                    return current_repo
            else:
                print(f"{error}L·ªói khi xo√° repo:", r.status_code, r.text)
                return current_repo
        else:
            print(f"{error}{do}ƒê√£ hu·ª∑ xo√° repo.")
            return current_repo
    except (IndexError, ValueError):
        print("L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá.")
        return current_repo

def main():
    headers, username = ma_git()
    repo = ma_repo(headers, username)

    while True:
        minhanhs()
        print(f"\n[Repo hi·ªán t·∫°i: {repo}]")
        print("1. Upload - T·∫°o file m·ªõi")
        print("2. ƒê·ªïi repo")
        print("3. Xo√° file")
        print("4. Xo√° repo")
        print("5. Tho√°t")
        choice = input(f"Nh·∫≠p l·ª±a ch·ªçn: ").strip()

        if choice == '1':
            ma_up_file(headers, username, repo)
        elif choice == '2':
            repo = ma_repo(headers, username)
        elif choice == '3':
            delete_file(headers, username, repo)
        elif choice == '4':
            repo = delete_repo(headers, username, repo)
        elif choice == '5':
            print(f"C·∫£m ∆°n! Ch√∫c b·∫°n d√πng tool vui v·∫ª")
            break
        else:
            print(f"{error}L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá.")

if __name__ == "__main__":
    main()